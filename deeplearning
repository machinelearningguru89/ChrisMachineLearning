import tensorflow as tf


#Neural Network
class Neural_Network(object):
  def __init__(self):
  
  #Design Hyperparamters
  self.inputlayer = 2
  self.outputlayer = 1
  self.hiddenlayer - 10

#Forward propagation
  def feedforward(self):
        self.layer1 = sigmoid(np.dot(self.input, self.weights1))
        self.output = sigmoid(np.dot(self.layer1, self.weights2))

#Backpropagation
   def backprop(self):
        # application of the chain rule to find derivative of the loss function with respect to weights2 and weights1
        d_weights2 = np.dot(self.layer1.T, (2*(self.y - self.output) * sigmoid_derivative(self.output)))
        d_weights1 = np.dot(self.input.T,  (np.dot(2*(self.y - self.output) * sigmoid_derivative(self.output), self.weights2.T) * sigmoid_derivative(self.layer1)))

        # update the weights with the derivative (slope) of the loss function
        self.weights1 += d_weights1
        self.weights2 += d_weights2

#Trained model in 10000 iterations to reach the local minima

